有关我2018年后台开发找实习/工作经验的分享

  我是2019届的硕士，在去年拿到了腾讯SSP（实习转正）和阿里云A等Offer。在我找工作的时候得到了牛客网很多大佬的帮助，因此非常感谢牛客网这个平台，在这里，我想给大家分享一下我的找工作经验和心路历程。这个文章会不断更新，我想到什么就往上加一点。       第一点是永远都避免不了的学校，我研究生的学校是某C9，要说对找工作的帮助，我觉得是有的。学校的作用是抬高找工作的下限，很多大厂会认为一个出身名校的同学的基本功是扎实的，因此会很乐于接纳这样的同学。但是指望名校光环提高自己的上限是不切实际的，一个希望得到用人单位更高等级的承认的人，应当更加明显地证明自己的价值。所以对于很多出身并不那么“高贵”的同学，或者其他专业的同学，会显得有点畏手畏脚。但我觉得我们完全没有必要妄自菲薄。说实话，我自己本科专业也和计算机一点不搭边，在面试的时候也和面试官提到这个问题，但面试官给我的答复是只要有能力，没有人会看你的学校或者专业。       第二点是有关算法和工程岗，在去年的招聘中，算法岗是非常热的，因此我身边的朋友中产生了两种想法。第一种认为算法岗逼格高待遇高，我要选算法岗；第二种觉得工程岗简单好进，我要选工程岗。我觉得这两种想法都是不对的，所谓外行看热闹，内行看门道，计算机这一行关键的上升空间在于自己的实力，我觉得无论是人云亦云随波逐流还是另辟蹊径自成一家都是不可取的。招聘市场的事实是，无论是算法岗还是工程岗，缺的总是出类拔萃，多的总是平庸之辈，有着时间纠结，不如选择一个自己拿手的方向好好努力。       第三点是关于简历编写和投递，我觉得核心点是能不能在给阅读者最好的体验的同时展现出自己的能力。在这里给大家分享我朋友的招人轶事，这位同学是去年十月份投递的，但隔了两三个月他的邮件才从垃圾箱里被发现。打开一看，标题一个名字一个要申请的岗位，正文空空如也，附了一个pdf文件名字叫简历.pdf，结果触发了邮箱规则，等看到的时候黄花菜已经凉了。这个说实话蛮遗憾的，但打开简历一看，且不说一堆乐于助人C++熟练的自我评价和各种社会实践活动占据了大量篇幅（这确实也算亮点），但在此之外，并没有看到他列出能胜任申请的职位的证据。对于这样的同学，他确实可能有真才实学，但因为不重视简历白白错失了机会，实在是很冤。特别是这样的事情常常出现在一些大佬身上，很多大佬明明很强，但是平常坏习惯喜欢装菜卖弱，逢人就自称蒟蒻，要当人家腿部挂件，这样的思想不仅给别人造成极大的心理阴影，而且是非常危险的，千万不能带到简历上。因此我觉得如果大家有什么和自己申请岗位相关的材料，一定要放在头版头条，加亮显示。       第四点是关于实习，很多人拿到实习就大舒一口气，觉得解放了，从此每天开始吃鸡，打王者荣耀（我自己也是，不过我王者太菜了，打了半年才到钻石……）。等到了实习的时候，因为工作单位往往对实习生要求不高，所以在工作上也是敷衍了事。这样的同学在实习结束的时候往往拿到一个不上不下的Offer，签也不是，不签也不是。参加秋招，基础知识也忘了很多，又得从头复习。所以在参加实习的时候一定要严格要求自己，不仅要完成工作，还要完成好。在这一点上我想额外提的是工作和学习不一样，在学习的时候我们追求秀，写代码要炫技，凡事都要自己造轮子。但在工作上花里胡哨真的是不可取的，由于我在腾讯是第一次实习，所以在这一方面也翻了错误，不太注意细节，在这里非常感谢领导和同事们的包容。       第五点有关技术，具体技术不说了，牛客网上有很多大佬做出了很多分享，这里推荐[TeeKee大佬](https://www.nowcoder.com/profile/1872821)和[CyC20***佬](https://www.nowcoder.com/profile/124213)整理的大纲。我这里想额外提一点就是刷题。首先刷题肯定是重要的，我自己也刷了约400+道Leetcode。但我觉得刷题需要非常注意效率和质量，不可以唯数量论，更不可当成搞ACM。原因之一是刷题很占时间，会影响对其他知识的复习；原因之二是面试的算法题往往不会特别为难人，但这时候把一道Easy或者Medium在最短时间内写对并且讲清楚就特别重要了。今日头条的笔试题应该算是一个特例，去年很多人都反映它比其他公司的要难。如果你是OI/ACM大佬，那么自然可以轻松AK。但如果只是普通人，其实也不要担心，只要题目做得不太崩，都会有面试机会的。甚至我身边的一些同学，包括我自己其实都没有参加过头条的笔试，直接进入了面试（非白金码渠道），所以没有必要对此太过紧张。这个时候倒是面试的时候的发挥更重要一点了。    第六点有关博客，我觉得维护一个好看的博客对找工作时非常有帮助的。我从2015年开始写技术博客，至今已经有了100+篇的技术文章。在写文章方面，我觉得最重要的一点就是要原创，然后要追求准确，最后要写得通俗易懂。我这里建议大家不要使用CSDN，而是自己注册一个域名。网站的搭建可以借助于github.io或者codings等服务提供商搭建静态网站。一个比较好的工具是hexo，可以参照 http://www.calvinneo.com/2015/10/19/Hexo%E5%B8%B8%E5%87%BA%E7%8E%B0%E7%9A%84%E9%85%8D%E7%BD%AE%E9%97%AE%E9%A2%98/ 进行搭建。       第七点有关github。面试官会非常喜欢一个喜欢造轮子的Github作者。然而现在的轮子满天飞，我们如何去打造属于自己的轮子呢？举个例子，在帖子https://www.nowcoder.com/discuss/163292中，这位老哥说不能去实习，问C++有什么有趣的项目可以做。我在这里以我Github上的一些项目为例给大家做个介绍。    1. CFortranTranslator https://github.com/CalvinNeo/CFortranTranslator 这个项目把Fortran 77/90语言转成C++14语言，这个说实话是个苦力活，做起来用的人也不多。我当时做这个项目完全是出于个人兴趣，加上本科的课题组用Fortran比较多，所以做了这个东西。这个项目比较好的一点就是能够保证翻译后的代码的可读性，也就是说得到的C++代码能够做到与原来的Fortran代码一一对应，考虑到两个语言的特性差别比较大，并且还要支持77/90标准混写，以及一些不符合标准的情况，其实在这方面费了点功夫。本来也不觉得是亮点，没想到大多数面试官还是非常感兴趣的，和我聊了很多。    2. ATP https://github.com/CalvinNeo/ATP 这个项目是我在阅读了libutp的源码之后，吸取其中的思想自己写的一个可靠传输库。这个本来是我们研究生的一个大作业，但我老师觉得我写的比较好，于是就让我进一步修改，准备给下一届学生当demo。我在这里非常推荐没有自己实现过传输层、HTTPServer、RPC框架的人选择其中之一来实现。对加深计算机网络的理解很有帮助。    3. Nuft https://github.com/CalvinNeo/Nuft 这个项目是我参照Raft论文实现的Raft共识算法库。Raft算法的工程友好度很强，是提高自己编写分布式系统能力的推荐工程。       最后献上我的博客www.calvinneo.com和github(github.com/CalvinNeo)，希望能够和大家互相交流。祝愿大家能够找到好实习和好工作！       ---------------    有朋友问阿里云的面经，由于阿里云实际上是一个非常大的事业部，所以面经问的东西差别还是比较大的。首先代码题肯定是有的，但不会很难，Leetcode的Hard题一般不会出现。然后简历上的项目是重点，可能会被问的很深，所以没有把握的不要写上简历，虽然很多公司都一样，但阿里尤其如此。阿里云在技术上非常重视对Linux的考察，对Linux的了解至少要达到读过apue、unp这样子。特别是在实现这块，例如内存管理、文件系统这些都是常考的。在语言方面主要以C++为主，但并不涉及很深入的C++知识，一般四大名著过一遍就行了。系统设计在比较后的面试轮次中也会涉及的，这里的话主要是自己平时要多涉猎一点常用的系统，例如如果你对Redis、MySQL、RocksDB等有较为深刻的理解，那么在应对设计方面是有加成的。面试的流程是比较长的，大于等于四轮，每轮时间间隔会在几天到一周不等。 

